searchState.loadedDescShard("evdev_rs", 0, "Rust bindings to libevdev, an wrapper for evdev devices.\nused by EVIOCGABS/EVIOCSABS ioctls\nThe fd is not in O_NONBLOCK and a read may block\nOpaque struct representing an evdev device\nPretend the next event is a SYN_DROPPED and require the …\nGrab the device if not currently grabbed\nThe event structure itself\nProcess data in normal mode\nTurn the LED off\nTurn the LED on\nProcess data in sync mode\n<code>next_event</code> has finished without an error and an event is …\nDepending on the <code>next_event</code> read flag: libevdev received a …\nOpaque struct representing an evdev uinput device\nUngrab the device if currently grabbed\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nvalues that are within this value will be discarded by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nspecifies fuzz value that is used to filter noise from the …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nspecifies maximum value for the axis\nspecifies minimum value for the axis\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nspecifies resolution for the values reported for the axis\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nThe time at which event occured\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nlatest reported value for the axis\nOpaque struct representing an evdev device\nGet the axis info for the given axis, as advertised by the …\nChange the fd for this device, without re-reading the …\nGet the currently active slot.\nForcibly disable an EventType/EventCode on this device, …\nForcibly disable an event code on this device, even if the …\nForcibly disable an event type on this device, even if the …\nReturn the driver version of a device already intialize …\nForcibly enable an EventType/InputProp on this device, …\nForcibly enable an event type on this device, even if the …\nForcibly enable an event type on this device, even if the …\nEnables this property, a call to <code>set_fd</code> will overwrite any …\nReturns the current value of the event type.\nReturns the file associated with the device\nGrab or ungrab the device through a kernel EVIOCGRAB.\nReturns <code>true</code> if device support the …\nReturn <code>true</code> is the device support this event type and code …\nCheck if there are events waiting for us.\nReturns <code>true</code> is the device support this event type and …\nReturns <code>true</code> if device support the property and false …\nTurn an LED on or off.\nInitialize a new libevdev device.\nInitialize a new libevdev device from the given fd.\nGet the next event from the device. This function operates …\nGet the number of slots supported by this device.\nChange the abs info for the given EV_ABS event code, if …\nSet the clock ID to be used for timestamps. Further events …\nSet the value for a given event type and code.\nSet the file for this struct and initialize internal data.\nSet the device’s EV_ABS axis to the value defined in the …\nSet the value for a given code for the given slot.\nReturn the current value of the code for the given slot.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe given type constant for the passed name or Errno if …\nLook up an event code by its type and name. Event codes …\nLook up an input property by its name. Properties start …\nThe max value defined for the given event type, e.g. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ndebug information\ncritical errors and application bugs\ninformational messages\nReturns the argument unchanged.\nReturn the current log priority level. Messages higher …\nCalls <code>U::from(self)</code>.\nDefine the minimum level to be printed to the log handler. …\nOpaque struct representing an evdev uinput device\nCreate a uinput device based on the given libevdev device.\nReturn the file descriptor used to create this uinput …\nPost an event through the uinput device.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")