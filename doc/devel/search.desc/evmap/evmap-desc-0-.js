searchState.loadedDescShard("evmap", 0, "A lock-free, eventually consistent, concurrent multi-value …\nAdd this value to the set of entries for this key.\nRemove all values in the value set for this key.\nRemove the value set for this key.\nShrinks <code>Values</code> to their minimum necessary size, freeing …\nA live reference into the read half of an evmap.\nA pending map operation.\nOptions for how to initialize the map.\nUnary predicate used to retain elements.\nRemove all values for all keys.\nA guard wrapping a live reference into an evmap.\nAn <code>Iterator</code> over keys and values in the evmap.\nA handle that may be used to read from the eventually …\nA type that is both <code>Sync</code> and <code>Send</code> and lets you produce new …\nRemove this value from the set of entries for this key.\nReplace the set of entries for this key with this value.\nReserves capacity for some number of additional elements …\nRetains all values matching the given predicate.\nA bag of values for a given key in the evmap.\nA handle that may be used to modify the eventually …\nReturns the number of values that can be held without …\nClear the value-bag of the given key, without removing it.\nCreate the map, and construct the read and write handles …\nReturns true if a value matching <code>value</code> is among the stored …\nReturns true if the map contains any values for the …\nReturns true if the map contains any values for the …\nReturns true if the map contains the specified value for …\nReturns true if the map contains the specified value for …\nRemove the value-bag for the given key.\nEvaluate the predicate for the given element\nCreate a new <code>Sync</code> type that can produce additional …\nShrinks a value-bag to it’s minimum necessary size, …\nLike <code>WriteHandle::fit</code>, but shrinks all value-bags in the …\nRefresh as necessary to ensure that all operations are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a guarded reference to the values corresponding to …\nReturns a reference to the values corresponding to the key.\nReturns a guarded reference to <em>one</em> value corresponding to …\nReturns a guarded reference to <em>one</em> value corresponding to …\nReturns a guarded reference to <em>one</em> value corresponding to …\nProduce a new <code>ReadHandle</code> to the same map as this factory …\nAdd the given value to the value-bag of the given key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the writer has destroyed this map.\nReturns true if the bag holds no values.\nReturns true if the map contains no elements.\nReturns true if the map contains no elements.\nAn iterator visiting all elements in arbitrary order.\nIterate over all key + valuesets in the map.\nReturns the number of values.\nReturns the number of non-empty keys present in the map.\nReturns the number of non-empty keys present in the map.\nRead all values in the map, and transform them into a new …\nGet the current meta value.\nGet the current meta value.\nReturns a guarded reference to the values corresponding to …\nCreate an empty eventually consistent map.\nGives the sequence of operations that have not yet been …\nPurge all value-bags from the map.\nTake out a guarded live reference to the read side of the …\nRefresh the handle used by readers so that pending writes …\nRemove the given value from the value-bag of the given key.\nReserves capacity for some number of additional elements …\nRetain elements for the given key using the provided …\nSet the metadata.\nTypes that can be cheaply aliased.\nReplace the value-bag of the given key with the given …\nSet the initial capacity for the map.\nCreate an empty eventually consistent map with meta …\nSet the hasher used for the map.\nCreate an empty eventually consistent map with meta …\nSet the initial meta value for the map.\nIf you are willing to have your values be copied between …\nTypes that implement this trait can be cheaply copied by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerform an aliasing copy of this value.")