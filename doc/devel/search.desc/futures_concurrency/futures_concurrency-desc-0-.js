searchState.loadedDescShard("futures_concurrency", 0, "Performant, portable, structured concurrency operations …\nHelper functions and types for fixed-length arrays.\nAsynchronous basic functionality.\nThe futures concurrency prelude.\nComposable asynchronous iteration.\nA collection of errors.\nA stream that chains multiple streams one after another.\nA future which waits for two similarly-typed futures to …\nA stream that merges multiple streams into a single stream.\nA future which waits for the first future to complete.\nA future which waits for the first successful future to …\nA future which waits for all futures to complete …\nA stream that ‘zips up’ multiple streams into a single …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe resulting error type.\nThe resulting error type.\nThe <code>Future</code> implementation returned by this method.\nWhich kind of future are we turning this into?\nWhich kind of future are we turning this into?\nWhich kind of future are we turning this into?\nAn extension trait for the <code>Future</code> trait.\nWait for all futures to complete.\nThe resulting output type.\nThe resulting output type.\nThe resulting output type.\nThe resulting output type.\nWait for the first future to complete.\nWait for the first successful future to complete.\nWait for all futures to complete successfully, or abort …\nSuspends a future until the specified deadline.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWait for both futures to complete.\nWaits for multiple futures to complete.\nWait for the first future to complete.\nWait for the first future to complete.\nWaits for the first successful future to complete.\nWaits for multiple futures to complete, either returning …\nDelay resolving the future until the given deadline.\nDelay resolving the future until the given deadline.\nTakes multiple streams and creates a new stream over all …\nConversion into a <code>Stream</code>.\nWhich kind of stream are we turning this into?\nWhat’s the return type of our stream?\nThe type of the elements being iterated over.\nThe resulting output type.\nWhat’s the return type of our stream?\nCombines multiple streams into a single stream of all …\nWhat stream do we return?\nThe stream type.\nWhat stream do we return?\nAn extension trait for the <code>Stream</code> trait.\nDelay execution of a stream once for the specified …\n‘Zips up’ multiple streams into a single stream of …\nCombine multiple streams into a single stream.\nTakes two streams and creates a new stream over all in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a stream from a value.\nCombine multiple streams into a single stream.\nCombines two streams into a single stream of all their …\nDelay the yielding of items from the stream until the …\nDelay the yielding of items from the stream until the …\n‘Zips up’ multiple streams into a single stream of …\nCombine multiple streams into a single stream.")