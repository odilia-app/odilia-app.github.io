searchState.loadedDescShard("lexopt", 0, "A pathologically simple command line argument parser.\nA command line argument found by <code>Parser</code>, either an option …\nFor custom error messages in application code.\nAn error during argument parsing.\nA long option, e.g. <code>Long(&quot;verbose&quot;)</code> for <code>--verbose</code>. (The …\nAn option argument was expected but was not found.\nA value was found that was not valid unicode.\nA parser for command line arguments.\nParsing a value failed. Returned by methods on <code>ValueExt</code>.\nAn iterator for the remaining raw arguments, returned by …\nA short option, e.g. <code>Short(&#39;q&#39;)</code> for <code>-q</code>.\nA positional argument was found when none was expected.\nAn unexpected option was found.\nAn option had a value when none was expected.\nA positional argument, e.g. <code>/dev/null</code>.\nAn optional extension trait with methods for parsing …\nAn iterator for multiple option-arguments, returned by …\nReturn the remaining arguments as a slice.\nThe name of the command, as in the zeroth argument of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a parser from an iterator that does <strong>not</strong> include the …\nCreate a parser from the environment using …\nCreate a parser from an iterator. This is useful for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the next option or positional argument.\nConsume and return the next argument if a condition is …\nGet a value only if it’s concatenated to an option, as …\nDecode the value and parse it using <code>FromStr</code>.\nDecode the value and parse it using a custom function.\nReturn a reference to the next() value without consuming …\nA small prelude for processing arguments.\nTake raw arguments from the original command line.\nConvert the <code>OsString</code> into a <code>String</code> if it’s valid Unicode.\nTake raw arguments from the original command line, <em>if</em> the …\nConvert an unexpected argument into an error.\nGet a value for an option.\nGather multiple values for an option.\nThe error returned while parsing.\nThe most recently emitted option.\nThe option.\nThe value.\nThe string that failed to parse.")