searchState.loadedDescShard("odilia_cache", 0, "An internal cache used within Odilia.\nA method of performing I/O side-effects outside the cache …\nA struct representing an accessible. To get any …\nConvert an <code>atspi::proxy::accessible::AccessibleProxy</code> into …\nAdd an item via a reference instead of creating the …\nBulk add many items to the cache; only one accessible …\nThe application (root object(?)      (so)\nThe children (ids) of the accessible\nChild count of the accessible.I\nClears the cache completely.\nDescription of the item\nGet all edges for a given accessible object. This means: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>CacheItem</code> from an <code>atspi::Event</code> type.\nGet a single item from the cache.\nget a many items from the cache; this only creates one …\nGet a single item from the cache by ID.\nGet a single item from the cache. This will also get the …\nGet a single item from the cache (note that this copies …\nThe accessible ID, which is an arbitrary string specified …\nThe accessible index in parent.I\nThe exposed interface(s) set\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLookup a given <code>CacheKey</code> that was not found in the cache..\nEdit a mutable <code>CacheItem</code>. Returns true if the update was …\nName of the item\ncreate a new, fresh cache\nThe accessible object (within the application)    (so)\nThe parent object.  (so)\nThe set of relations between this and other nodes in the …\nRemove a single cache item. This function can not fail.\nBulk remove all ids in the cache; this only refreshes the …\nAccessible role. u\nAssuming that the sender is “:x.y”, this stores the …\nThe states applicable to the accessible.  au\nThe text of the accessible\nCreates an <code>AccessibleProxy</code> from the existing accessible …\nCreates an <code>ActionProxy</code> from the existing accessible item.\nCreates an <code>ApplicationProxy</code> from the existing accessible …\nCreates an <code>CollectionProxy</code> from the existing accessible …\nCreates an <code>ComponentProxy</code> from the existing accessible …\nTurn the <code>Link</code> items into <code>CacheItem</code>s.\nGet all edges for a given accessible object. This means: …\nCreates an <code>AccessibleProxy</code> from the existing accessible …\nCreates an <code>ActionProxy</code> from the existing accessible item.\nCreates an <code>ApplicationProxy</code> from the existing accessible …\nCreates an <code>CollectionProxy</code> from the existing accessible …\nCreates an <code>ComponentProxy</code> from the existing accessible …")