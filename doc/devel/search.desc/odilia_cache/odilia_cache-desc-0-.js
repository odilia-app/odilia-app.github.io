searchState.loadedDescShard("odilia_cache", 0, "A request to add bulk items to the cache. Only used for …\nA response that adding items to the cache succeeeded. Only …\nAn internal cache used within Odilia.\nA method of interacting with the cache. All requests on …\nA method of performing I/O side-effects outside the cache …\nA struct representing an accessible. To get any …\nImplemented for all events which modify items in the cache …\nConvert an <code>atspi::proxy::accessible::AccessibleProxy</code> into …\nThe application (root object(?)      (so)\nThe children (ids) of the accessible\nChild count of the accessible.I\nThe human-readable longer name (description) of the item. …\nGet all edges for a given accessible object. This means: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a single item from the cache.\nget a many items from the cache; this only creates one …\nGet a single item from the cache. This will also get the …\nGet a single item from the cache (note that this copies …\nSame as [<code>get_or_create</code>] but starts with an initial …\nSame as [<code>get_or_create</code>] but starts with an initial …\nHow does this event affect the cache. It might remove …\nThe help-text of the item. <code>None</code> if string is empty.\nThe accessible ID, which is an arbitrary string specified …\nThe accessible index in parent.I\nThe exposed interface(s) set\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBulk query an application based on the [<code>CacheKey.sender</code>] …\nLookup a given <code>CacheKey</code> that was not found in the cache..\nA separate method from [<code>lookup_external</code>] for converting an …\nA separate method from [<code>lookup_external</code>] for converting an …\nA seperate method from [<code>lookup_external</code>] for getting …\nModify the given item with closure [<code>F</code>] if it was already …\nThe human-readable short name of the item. <code>None</code> if string …\ncreate a new, fresh cache\nThe accessible object (within the application)    (so)\nThe parent object.  (so)\nRemove a single cache item. This function can not fail.\nBulk remove all ids in the cache; this only refreshes the …\nRequest the <code>CacheRequest</code> from the cache.\nAccessible role. u\nAssuming that the sender is “:x.y”, this stores the …\nThe states applicable to the accessible.  au\nThe actual, internal text of the item; this will be <code>None</code> …\nCreates an <code>AccessibleProxy</code> from the existing accessible …\nCreates an <code>ActionProxy</code> from the existing accessible item.\nCreates an <code>ApplicationProxy</code> from the existing accessible …\nCreates an <code>CollectionProxy</code> from the existing accessible …\nCreates an <code>ComponentProxy</code> from the existing accessible …\nGet all edges for a given accessible object. This means: …\nCreates an <code>AccessibleProxy</code> from the existing accessible …\nCreates an <code>ActionProxy</code> from the existing accessible item.\nCreates an <code>ApplicationProxy</code> from the existing accessible …\nCreates an <code>CollectionProxy</code> from the existing accessible …\nCreates an <code>ComponentProxy</code> from the existing accessible …\nA request to add bulk items to the cache. Only used for …\nA response that adding items to the cache succeeeded. Only …\nImplemented for all events which modify items in the cache …\nHow does this event affect the cache. It might remove …")