searchState.loadedDescShard("rdev", 0, "Simple library to listen and send events to keyboard and …\nAlt key on Linux and Windows (option key on macOS)\nStandard mouse buttons Some mice have more than 3 buttons. …\nMouse Button\nErrors that occur when trying to get display size.\nWhen events arrive from the OS they get some additional …\nMacOS\nMacOS\nIn order to manage different OSs, the current EventType …\nCallback type to send to grab function.\nErrors that occur when trying to grab OS events. Be …\nKey names based on physical location on the device Merge …\nWindows\nWindows\nThe keys correspond to a standard qwerty layout, they don…\nLinux\nLinux\nWe can define a dummy Keyboard, that we will use to detect …\nErrors that occur when trying to capture OS events. Be …\nMacOS\nMacOS\nalso known as “windows”, “super”, and “command”\nalso known as “windows”, “super”, and “command”\nLinux\nLinux\nWindows\nWindows\nValues in pixels. <code>EventType::MouseMove{x: 0, y: 0}</code> …\nLinux\nLinux\nMarking an error when we tried to simulate and event\nAll\n<code>delta_y</code> represents vertical scroll and <code>delta_x</code> represents …\nLinux\nChanges the keyboard state as if this event happened. we …\nReturns the size in pixels of the main screen. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrabbing global events. In the callback, returning None …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListening to global events. Caveat: On MacOS, you require …\nResets the keyboard state as if we never touched it (no …\nSending some events")