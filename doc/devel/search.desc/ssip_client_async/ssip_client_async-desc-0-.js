searchState.loadedDescShard("ssip_client_async", 0, "SSIP client\nMessages from all clients\nAll clients\nCapital letters recognition mode.\nSpecific client\nClient error, either I/O error or SSIP error.\nClient identifier\nClient name\nClient result.\nClient identifiers\nClient result consisting in a single status line\nCurrent client\nCursor motion in history\nContains the error value\nContains the error value\nNotification event\nEvent identifier\nNotification event type (returned by server)\nHistory client status\nPosition in history\nSymbolic key names\nLast message from current client\nSpecific message\nMessage identifier\nMessage identifiers\nNotification type\nContains the success value\nContains the success value\nSort ordering\nPriority\nPunctuation mode.\nClient with a queue of requests.\nRequest for SSIP server.\nResponse from SSIP server.\nReturn code of SSIP commands\nSort direction in history\nProperty messages are ordered by in history\nCommand status line\nSynthesis voice\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn true if there is a pending request.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalid data I/O error\nCreate I/O error\nLast request in the queue.\nNew asynchronous client build on top of a synchronous …\nPop the last request in the queue.\nPush a new request in the queue.\nReceive one response.\nWrite one pending request if any.\nUnexpected EOF I/O error\nSSIP client on generic async stream\nOpen a block\nEnd a block\nCancel current message\nCheck the result of <code>set_client_name</code>.\nCheck if server accept data.\nCheck status of answer, discard lines.\nReturns the argument unchanged.\nGet the current language\nGet the current output module\nGet the current pitch value.\nGet the current rate of speech.\nGet the current pre-defined voice\nGet the current volume.\nGet client id in the history.\nGet a range of client messages.\nGet clients in history.\nGet the id of the message the history cursor is pointing …\nGet last message said.\nGet the id of the last message sent by the client.\nReturn the text of an history message.\nMove the cursor position backward or forward.\nSearch in message history.\nSet the history cursor position.\nSet the ordering of the message types, from the minimum to …\nSet the maximum length of short versions of history …\nSort messages in history.\nSpeak the message from history.\nCalls <code>U::from(self)</code>.\nList the available output modules\nLists the available voices for the current synthesizer\nList the available symbolic voice names\nPause current message\nClose the connection\nReceive one response.\nReceive client id\nReceive cursor pos\nReceive a notification\nReceive a list of client status from history.\nReceive signed 8-bit integer\nReceive lines\nReceive message id\nReceive a single string\nReceive a list of synthesis voices\nReceive unsigned 8-bit integer\nResume current message\nSend a request\nSend lines of text (terminated by a single dot).\nSet capital letters recognition mode\nSet debug mode. Return the log location\nEnable or disable history of received messages.\nSet language code\nEnable notification events\nSet output module\nSet the number of (more or less) sentences that should be …\nSet the pitch of speech. n is an integer value within the …\nSet message priority\nSet punctuation mode\nSet the rate of speech. n is an integer value within the …\nSet spelling on or off\nSet SSML mode (Speech Synthesis Markup Language)\nSet the voice\nSet the voice type (MALE1, FEMALE1, …)\nSet the volume of speech. n is an integer value within the …\nInitiate communitation to send text to speak\nSpeak a char\nSpeak a symbolic key name\nStop current message\nSSIP client on generic stream\nA trait to extract the raw file descriptor from an …\nExtracts the raw file descriptor.\nOpen a block\nEnd a block\nCancel current message\nCheck the result of <code>set_client_name</code>.\nCheck if server accept data.\nCheck status of answer, discard lines.\nReturns the argument unchanged.\nGet the current language\nGet the current output module\nGet the current pitch value.\nGet the current rate of speech.\nGet the current pre-defined voice\nGet the current volume.\nGet client id in the history.\nGet a range of client messages.\nGet clients in history.\nGet the id of the message the history cursor is pointing …\nGet last message said.\nGet the id of the last message sent by the client.\nReturn the text of an history message.\nMove the cursor position backward or forward.\nSearch in message history.\nSet the history cursor position.\nSet the ordering of the message types, from the minimum to …\nSet the maximum length of short versions of history …\nSort messages in history.\nSpeak the message from history.\nCalls <code>U::from(self)</code>.\nList the available output modules\nLists the available voices for the current synthesizer\nList the available symbolic voice names\nPause current message\nClose the connection\nReceive one response.\nReceive client id\nReceive cursor pos\nReceive a notification\nReceive a list of client status from history.\nReceive signed 8-bit integer\nReceive lines\nReceive message id\nReceive a single string\nReceive a list of synthesis voices\nReceive unsigned 8-bit integer\nResume current message\nSend a request\nSend one line of text (terminated by a single dot).\nSend lines of text (terminated by a single dot).\nSet capital letters recognition mode\nSet the client name. It must be the first call on startup.\nSet debug mode. Return the log location\nEnable or disable history of received messages.\nSet language code\nEnable notification events\nSet output module\nSet the number of (more or less) sentences that should be …\nSet the pitch of speech. n is an integer value within the …\nSet message priority\nSet punctuation mode\nSet the rate of speech. n is an integer value within the …\nSet spelling on or off\nSet SSML mode (Speech Synthesis Markup Language)\nSet the voice\nSet the voice type (MALE1, FEMALE1, …)\nSet the volume of speech. n is an integer value within the …\nInitiate communitation to send text to speak\nSpeak a char\nSpeak a symbolic key name\nStop current message\nServer error: ERR ALREADY INSIDE BLOCK\nServer error: ERR ALREADY OUTSIDE BLOCK\nServer error: ERR MODULE CANT REPORT VOICES\nServer error: ERR COULDNT SET CAP LET RECOGNITION\nServer error: ERR COULDNT SET CLIENT_NAME\nServer error: ERR COULDNT SET DEBUGGING\nServer error: ERR COULDNT SET LANGUAGE\nServer error: ERR COULDNT SET NOTIFICATION\nServer error: ERR COULDNT SET OUTPUT MODULE\nServer error: ERR COULDNT SET PAUSE CONTEXT\nServer error: ERR COULDNT SET PITCH\nServer error: ERR COULDNT SET PITCH RANGE\nServer error: ERR COULDNT SET PRIORITY\nServer error: ERR COULDNT SET PUNCT MODE\nServer error: ERR COULDNT SET RATE\nServer error: ERR COULDNT SET SPELLING\nServer error: ERR COULDNT SET SSML MODE\nServer error: ERR COULDNT SET TABLE\nServer error: ERR COULDNT SET VOICE\nServer error: ERR COULDNT SET VOLUME\nClient error: ERR ID DOESNT EXIST\nServer error: ERR INTERNAL\nClient error: ERR INVALID COMMAND\nClient error: ERR INVALID ENCODING\nClient error: ERR MISSING PARAMETER\nServer error: ERR NOT ALLOWED INSIDE BLOCK\nClient error: ERR PARAMETER NOT A NUMBER\nClient error: ERR PARAMETER NOT A STRING\nServer error: ERR NOT YET IMPLEMENTED\nClient error: ERR NO CLIENT\nClient error: ERR NO MESSAGE\nServer error: ERR NO OUTPUT MODULE LOADED\nServer error: ERR NO SOUND ICONS\nClient error: ERR NO SUCH CLIENT\nClient error: ERR PARAMETER INVALID\nClient error: ERR PARAMETER NOT ON OR OFF\nClient error: ERR PITCH RANGE TOO HIGH\nClient error: ERR PITCH RANGE TOO LOW\nClient error: ERR PITCH TOO HIGH\nClient error: ERR PITCH TOO LOW\nClient error: ERR POSITION TOO HIGH\nClient error: ERR POSITION TOO LOW\nClient error: ERR RATE TOO HIGH\nClient error: ERR RATE TOO LOW\nClient error: ERR UNKNOWN ICON\nClient error: ERR UNKNOWN PRIORITY\nClient error: ERR VOLUME TOO HIGH\nClient error: ERR VOLUME TOO LOW\nEvent: BEGIN\nEvent: CANCELED\nEvent: END\nEvent: INDEX MARK\nEvent: PAUSED\nEvent: RESUMED\nSuccessful completion: OK CANCELED\nSuccessful completion: OK CAP LET RECOGNITION SET\nSuccessful completion: OK CLIENTS LIST SENT\nSuccessful completion: OK CLIENT ID SENT\nSuccessful completion: OK CLIENT NAME SET\nSuccessful completion: OK CURSOR MOVED BACKWARD\nSuccessful completion: OK CURSOR MOVED FORWARD\nSuccessful completion: OK CURSOR POSITION RETURNED\nSuccessful completion: OK CURSOR SET FIRST\nSuccessful completion: OK CURSOR SET LAST\nSuccessful completion: OK CURSOR SET TO POSITION\nSuccessful completion: OK DEBUGGING SET\nSuccessful completion: OK GET RETURNED\nSuccessful completion: OK HELP SENT\nSuccessful completion: OK INSIDE BLOCK\nSuccessful completion: OK LANGUAGE SET\nSuccessful completion: OK LAST MSG SAID\nSuccessful completion: OK MESSAGE QUEUED\nSuccessful completion: OK MSGS LIST SENT\nSuccessful completion: OK MESSAGE CANCELED\nSuccessful completion: OK MESSAGE TEXT SENT\nSuccessful completion: OK NOTIFICATION SET\nSuccessful completion: OK BUT NOT IMPLEMENTED – DOES …\nSuccessful completion: OK MODULE LIST SENT\nSuccessful completion: OK OUTPUT MODULE SET\nSuccessful completion: OK OUTSIDE BLOCK\nSuccessful completion: OK PAUSED\nSuccessful completion: OK PAUSE CONTEXT SET\nSuccessful completion: OK PITCH RANGE SET\nSuccessful completion: OK PITCH SET\nSuccessful completion: OK PRIORITY SET\nSuccessful completion: OK PUNCTUATION SET\nSuccessful completion: OK RATE SET\nSuccessful completion: OK RECEIVING DATA\nSuccessful completion: OK RESUMED\nSuccessful completion: OK SOUND ICON QUEUED\nSuccessful completion: OK SPELLING SET\nSuccessful completion: OK SSML MODE SET\nSuccessful completion: OK STOPPED\nSuccessful completion: OK TABLE LIST SEND\nSuccessful completion: OK TABLE SET\nSuccessful completion: OK VOICE LIST SENT\nSuccessful completion: OK VOICE SET\nSuccessful completion: OK VOLUME SET\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Unix stream socket.\nConnects to the socket named by <code>path</code>.\nConnects to the socket specified by <code>address</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the socket address of the local half of this …\nCreates an unnamed pair of connected sockets.\nReceives data on the socket from the remote address to …\nReturns the socket address of the remote half of this …\nGets the peer credentials for this Unix domain socket.\nReturns the read timeout of this socket.\nReceives data and ancillary data from socket.\nSends data and ancillary data on the socket.\nSet the id of the socket for network filtering purpose\nMoves the socket into or out of nonblocking mode.\nSets the read timeout for the socket.\nSets the write timeout for the socket.\nShuts down the read, write, or both halves of this …\nReturns the value of the <code>SO_ERROR</code> option.\nCreates a new independently owned handle to the underlying …\nSpawn the speech-dispatcher daemon before creating the …\nReturns the write timeout of this socket.\nA TCP stream between a local and a remote socket.\nOpens a TCP connection to a remote host.\nOpens a TCP connection to a remote host with a timeout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the value of the <code>SO_LINGER</code> option on this socket.\nReturns the socket address of the local half of this TCP …\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nReceives data on the socket from the remote address to …\nReturns the socket address of the remote peer of this TCP …\nReturns the read timeout of this socket.\nSets the value of the <code>SO_LINGER</code> option on this socket.\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nMoves this TCP stream into or out of nonblocking mode.\nSets the read timeout to the timeout specified.\nSets the value for the <code>IP_TTL</code> option on this socket.\nSets the write timeout to the timeout specified.\nShuts down the read, write, or both halves of this …\nGets the value of the <code>SO_ERROR</code> option on this socket.\nCreates a new independently owned handle to the underlying …\nGets the value of the <code>IP_TTL</code> option for this socket.\nReturns the write timeout of this socket.")