searchState.loadedDescShard("tower", 0, "<code>async fn(Request) -&gt; Result&lt;Response, Error&gt;</code>\nAlias for a type-erased error type.\nErrors produced by the service.\nThe future response value.\nDecorates a <code>Service</code>, transforming either the request or …\nResponses given by the service.\nAn asynchronous function from a <code>Request</code> to a <code>Response</code>.\nThe wrapped service\nDeclaratively construct <code>Service</code> values.\nAn extension trait for <code>Service</code>s that provides a variety of …\nExecutes a new future after this service’s future …\nConvert the service into a <code>Service</code> + <code>Send</code> trait object.\nConvert the service into a <code>Service</code> + <code>Clone</code> + <code>Send</code> trait …\nBuilder types to compose layers and services\nProcess the request and return the response asynchronously.\nProcess all requests from the given <code>Stream</code>, and produce a …\nConditionally dispatch requests to the inner service based …\nComposes this service with a <code>Filter</code> that conditionally …\nComposes this service with an <code>AsyncFilter</code> that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA collection of <code>Layer</code> based tower services\nWrap the given service with the middleware, returning a …\nMaps this service’s error value to a different value. …\nComposes a function that transforms futures produced by …\nComposes a function <em>in front of</em> the service.\nMaps this service’s response value to a different value. …\nMaps this service’s result type (…\nConsume this <code>Service</code>, calling with the providing request …\nReturns <code>Poll::Ready(Ok(()))</code> when the service is able to …\nYields a mutable reference to the service when it is ready …\nYields a mutable reference to the service when it is ready …\nYields the service when it is ready to accept a request.\nReturns a new <code>ServiceFn</code> with the given closure.\nThis module provides functionality to aid managing routing …\nComposes an asynchronous function <em>after</em> this service.\nVarious utility types and functions that are generally …\nDeclaratively construct <code>Service</code> values.\nExecutes a new future after this service’s future …\nThis wraps the inner service with the <code>Layer</code> returned by …\nThis wraps the inner service with the <code>Layer</code> returned by …\nCheck that the builder implements <code>Clone</code>.\nCheck that the builder when given a service of type <code>S</code> …\nCheck that the builder when given a service of type <code>S</code> …\nConditionally reject requests based on <code>predicate</code>.\nConditionally reject requests based on an asynchronous …\nReturns the underlying <code>Layer</code> implementation.\nAdd a new layer <code>T</code> into the <code>ServiceBuilder</code>.\nAdd a <code>Layer</code> built from a function that accepts a service …\nMap one error type to another.\nComposes a function that transforms futures produced by …\nMap one request type to another.\nMap one response type to another.\nMaps this service’s result type (…\nCreate a new <code>ServiceBuilder</code>.\nOptionally add a new layer <code>T</code> into the <code>ServiceBuilder</code>.\nWrap the service <code>S</code> with the middleware provided by this …\nWrap the async function <code>F</code> with the middleware provided by …\nApply an asynchronous function after the service, …\nConditionally dispatch requests to the inner service based …\nConditionally dispatch requests to the inner service based …\nChecks a request asynchronously.\nConditionally dispatch requests to the inner service based …\nConditionally dispatch requests to the inner service based …\nThe future returned by <code>check</code>.\nChecks a request synchronously.\nThe type of requests returned by <code>check</code>.\nThe type of requests returned by <code>check</code>.\nCheck whether the given request should be forwarded.\nCheck whether the given request should be forwarded.\nCheck a <code>Request</code> value against this filter’s predicate.\nCheck a <code>Request</code> value against this filter’s predicate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types\nGet a mutable reference to the inner service\nGet a mutable reference to the inner service\nGet a reference to the inner service\nGet a reference to the inner service\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code>, returning the inner service\nConsume <code>self</code>, returning the inner service\nReturns a new <code>Layer</code> that wraps services with a <code>Filter</code> …\nReturns a new <code>Layer</code> that wraps services with an <code>AsyncFilter</code>\nReturns a new layer that produces <code>Filter</code> services with the …\nReturns a new layer that produces <code>AsyncFilter</code> services …\nReturns a new <code>Filter</code> service wrapping <code>inner</code>.\nReturns a new <code>AsyncFilter</code> service wrapping <code>inner</code>.\nFiltered response future from <code>AsyncFilter</code> services.\nFiltered response future from <code>Filter</code> services.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecorates a <code>Service</code>, transforming either the request or …\nA <code>Layer</code> implemented by a closure. See the docs for <code>layer_fn</code>…\nThe wrapped service\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap the given service with the middleware, returning a …\nReturns a new <code>LayerFn</code> that implements <code>Layer</code> by calling the …\nUtilities for combining layers\nA no-op middleware.\nTwo middlewares chained together.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Identity</code> value\nCreate a new <code>Stack</code>.\nThis is how callers of <code>Steer</code> tell it which <code>Service</code> a <code>Req</code> …\n<code>Steer</code> manages a list of <code>Service</code>s which all handle the same …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a new <code>Steer</code> with a list of <code>Service</code>’s and a <code>Picker</code>.\nReturn an index into the iterator of <code>Service</code> passed to …\nOne type of backing <code>Service</code>.\nService returned by the <code>and_then</code> combinator.\nA <code>Layer</code> that produces a <code>AndThen</code> service.\nThe other type of backing <code>Service</code>.\nA <code>Clone</code> + <code>Send</code> boxed <code>Service</code>.\nA boxed <code>Layer</code> trait object.\nA boxed <code>Service + Send</code> trait object.\nThis is a <code>Stream</code> of responses resulting from calling the …\nA stream of responses received from the inner service in …\nCombine two different service types into a single type.\nA type that implements <code>Service</code> for a <code>Future</code> that produces …\nService returned by the <code>map_err</code> combinator.\nA <code>Layer</code> that produces <code>MapErr</code> services.\n<code>Service</code> returned by the <code>map_future</code> combinator.\nA <code>Layer</code> that produces a <code>MapFuture</code> service.\nService returned by the <code>MapRequest</code> combinator.\nA <code>Layer</code> that produces <code>MapRequest</code> services.\nService returned by the <code>map_response</code> combinator.\nA <code>Layer</code> that produces a <code>MapResponse</code> service.\nService returned by the <code>map_result</code> combinator.\nA <code>Layer</code> that produces a <code>MapResult</code> service.\nA <code>Future</code> consuming a <code>Service</code> and request, waiting until …\nOptionally forwards requests to an inner service.\nA future that yields a mutable reference to the service …\nA future that yields a mutable reference to the service …\nA <code>Future</code> that yields the service when it is ready to …\nAn extension trait for <code>Service</code>s that provides a variety of …\nA <code>Service</code> implemented by a closure.\n<code>Service</code> returned by the <code>then</code> combinator.\nA <code>Layer</code> that produces a <code>Then</code> service.\nA boxed <code>Service</code> trait object.\nExecutes a new future after this service’s future …\nConvert the service into a <code>Service</code> + <code>Send</code> trait object.\nConvert the service into a <code>Service</code> + <code>Clone</code> + <code>Send</code> trait …\nProcess all requests from the given <code>Stream</code>, and produce a …\nError types\nComposes this service with a <code>Filter</code> that conditionally …\nComposes this service with an <code>AsyncFilter</code> that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types\nReturns a new <code>FutureService</code> for the given future.\nGet a mutable reference to the inner service\nGet a reference to the inner service\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the wrapped <code>Service</code>.\nExtract the wrapped <code>Service</code>.\nConsume <code>self</code>, returning the inner service\nReturns a <code>Layer</code> for wrapping a <code>Service</code> in a <code>BoxService</code> …\nReturns a <code>Layer</code> for wrapping a <code>Service</code> in an …\nReturns a <code>Layer</code> for wrapping a <code>Service</code> in a <code>BoxCloneService</code>\nReturns a new <code>Layer</code> that produces <code>AndThen</code> services.\nReturns a new <code>Layer</code> that produces <code>MapErr</code> services.\nReturns a new <code>Layer</code> that produces <code>MapRequest</code> services.\nReturns a new <code>Layer</code> that produces <code>MapResponse</code> services.\nReturns a new <code>Layer</code> that produces <code>MapResult</code> services.\nReturns a new <code>Layer</code> that produces <code>MapFuture</code> services.\nReturns a new <code>Layer</code> that produces <code>Then</code> services.\nMaps this service’s error value to a different value. …\nComposes a function that transforms futures produced by …\nComposes a function <em>in front of</em> the service.\nMaps this service’s response value to a different value. …\nMaps this service’s result type (…\nCreate a new <code>BoxLayer</code>.\nCreate a new <code>BoxCloneService</code>.\nCreates a new <code>AndThen</code> service.\nCreates a new <code>AndThenLayer</code> layer.\nCreate new <code>CallAll</code> combinator.\nCreate new <code>CallAllUnordered</code> combinator.\nReturns a new <code>FutureService</code> for the given future.\nCreates a new <code>MapErr</code> service.\nCreates a new <code>MapErrLayer</code>.\nCreates a new <code>MapRequest</code> service.\nCreates a new <code>MapRequestLayer</code>.\nCreates a new <code>MapResponse</code> service.\nCreates a new <code>MapResponseLayer</code> layer.\nCreates a new <code>MapResult</code> service.\nCreates a new <code>MapResultLayer</code> layer.\nCreates a new <code>MapFuture</code> service.\nCreates a new <code>MapFutureLayer</code> layer.\nCreate a new <code>Optional</code>.\nCreates a new <code>Then</code> service.\nCreates a new <code>ThenLayer</code> layer.\nConsume this <code>Service</code>, calling with the providing request …\nConvert an <code>Option&lt;Layer&gt;</code> into a <code>Layer</code>.\nYields a mutable reference to the service when it is ready …\nYields a mutable reference to the service when it is ready …\nYields the service when it is ready to accept a request.\nReturns a new <code>ServiceFn</code> with the given closure.\nExtract the wrapped <code>Service</code>.\nExtract the wrapped <code>Service</code>.\nComposes an asynchronous function <em>after</em> this service.\nReturn responses as they are ready, regardless of the …\nError types for <code>Optional</code>.\nError returned if the inner <code>Service</code> has not been set.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResponse future from <code>AndThen</code> services.\nResponse future from <code>MapErr</code> services.\nResponse future from <code>MapResponse</code> services.\nResponse future from <code>MapResult</code> services.\nResponse future from <code>Then</code> services.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFuture types for <code>Optional</code>.\nResponse future returned by <code>Optional</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")