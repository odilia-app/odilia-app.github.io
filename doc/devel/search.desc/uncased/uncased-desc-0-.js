searchState.loadedDescShard("uncased", 0, "Case-preserving, ASCII case-insensitive <code>no_std</code> string …\nHelper trait to convert string-like references to …\nAn uncased (case-insensitive, case-preserving), owned <em>or</em> …\nA cost-free reference to an uncased (case-insensitive, …\nReturns <code>self</code> as an <code>&amp;str</code>.\nConvert <code>self</code> to an <code>UncasedStr</code>.\nConverts <code>self</code> into an owned <code>Uncased&lt;&#39;static&gt;</code>, allocating if\nReturns true if <code>s1</code> and <code>s2</code> are equal without considering …\nReturns the argument unchanged.\nCreates a new <code>Uncased</code> string from a borrowed <code>string</code>.\nCreates a new <code>Uncased</code> string from <code>string</code> without …\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into a <code>Box&lt;UncasedStr&gt;</code>.\nConverts <code>self</code> into an owned <code>Uncased&lt;&#39;static&gt;</code>, allocating if\nConverts <code>self</code> into an owned <code>String</code>, allocating if …\nConverts a <code>Box&lt;UncasedStr&gt;</code> into an <code>Uncased</code> without copying …\nReturns <code>true</code> if <code>self</code> has a length of zero bytes.\nReturns the length, in bytes, of <code>self</code>.\nCreates a new <code>Uncased</code> string from <code>string</code> without …\nCost-free conversion from an <code>&amp;str</code> reference to an …\nReturns <code>true</code> if <code>self</code> starts with any casing of the string …")