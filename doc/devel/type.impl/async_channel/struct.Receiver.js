(function() {
    var type_impls = Object.fromEntries([["odilia_cache",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Receiver%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#904\">Source</a><a href=\"#impl-Clone-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#905\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","odilia_cache::ActorRecv"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Receiver%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#898\">Source</a><a href=\"#impl-Debug-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#899\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","odilia_cache::ActorRecv"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Receiver%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#583-614\">Source</a><a href=\"#impl-Drop-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#583-614\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","odilia_cache::ActorRecv"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FusedStream-for-Receiver%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#966\">Source</a><a href=\"#impl-FusedStream-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.FusedStream.html\" title=\"trait futures_core::stream::FusedStream\">FusedStream</a> for <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_terminated\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#967\">Source</a><a href=\"#method.is_terminated\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_core/stream/trait.FusedStream.html#tymethod.is_terminated\" class=\"fn\">is_terminated</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the stream should no longer be polled.</div></details></div></details>","FusedStream","odilia_cache::ActorRecv"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Receiver%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#616\">Source</a><a href=\"#impl-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_recv\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#637\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.try_recv\" class=\"fn\">try_recv</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"enum\" href=\"async_channel/enum.TryRecvError.html\" title=\"enum async_channel::TryRecvError\">TryRecvError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to receive a message from the channel.</p>\n<p>If the channel is empty, or empty and closed, this method returns an error.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, TryRecvError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(()));\n\n<span class=\"macro\">assert_eq!</span>(r.try_recv(), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(r.try_recv(), <span class=\"prelude-val\">Err</span>(TryRecvError::Empty));\n\ndrop(s);\n<span class=\"macro\">assert_eq!</span>(r.try_recv(), <span class=\"prelude-val\">Err</span>(TryRecvError::Closed));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recv\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#673\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.recv\" class=\"fn\">recv</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_channel/struct.Recv.html\" title=\"struct async_channel::Recv\">Recv</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Receives a message from the channel.</p>\n<p>If the channel is empty, this method waits until there is a message.</p>\n<p>If the channel is closed, this method receives a message or returns an error if there are\nno more messages.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, RecvError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(()));\ndrop(s);\n\n<span class=\"macro\">assert_eq!</span>(r.recv().<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(r.recv().<span class=\"kw\">await</span>, <span class=\"prelude-val\">Err</span>(RecvError));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recv_blocking\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#710\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.recv_blocking\" class=\"fn\">recv_blocking</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"async_channel/struct.RecvError.html\" title=\"struct async_channel::RecvError\">RecvError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Receives a message from the channel using the blocking strategy.</p>\n<p>If the channel is empty, this method waits until there is a message.\nIf the channel is closed, this method receives a message or returns an error if there are\nno more messages.</p>\n<h5 id=\"blocking\"><a class=\"doc-anchor\" href=\"#blocking\">§</a>Blocking</h5>\n<p>Rather than using asynchronous waiting, like the <a href=\"async_channel/struct.Receiver.html#method.recv\" title=\"method async_channel::Receiver::recv\"><code>recv</code></a> method,\nthis method will block the current thread until the message is received.</p>\n<p>This method should not be used in an asynchronous context. It is intended\nto be used such that a channel can be used in both asynchronous and synchronous contexts.\nCalling this method in an asynchronous context may result in deadlocks.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, RecvError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n\n<span class=\"macro\">assert_eq!</span>(s.send_blocking(<span class=\"number\">1</span>), <span class=\"prelude-val\">Ok</span>(()));\ndrop(s);\n\n<span class=\"macro\">assert_eq!</span>(r.recv_blocking(), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(r.recv_blocking(), <span class=\"prelude-val\">Err</span>(RecvError));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.close\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#734\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.close\" class=\"fn\">close</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Closes the channel.</p>\n<p>Returns <code>true</code> if this call has closed the channel and it was not closed already.</p>\n<p>The remaining messages can still be received.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, RecvError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(()));\n\n<span class=\"macro\">assert!</span>(r.close());\n<span class=\"macro\">assert_eq!</span>(r.recv().<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(r.recv().<span class=\"kw\">await</span>, <span class=\"prelude-val\">Err</span>(RecvError));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_closed\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#753\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.is_closed\" class=\"fn\">is_closed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the channel is closed.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, RecvError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;()&gt;();\n<span class=\"macro\">assert!</span>(!r.is_closed());\n\ndrop(s);\n<span class=\"macro\">assert!</span>(r.is_closed());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#772\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the channel is empty.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n\n<span class=\"macro\">assert!</span>(s.is_empty());\ns.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert!</span>(!s.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#793\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the channel is full.</p>\n<p>Unbounded channels are never full.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::bounded;\n\n<span class=\"kw\">let </span>(s, r) = bounded(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert!</span>(!r.is_full());\ns.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert!</span>(r.is_full());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#813\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of messages in the channel.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n<span class=\"macro\">assert_eq!</span>(r.len(), <span class=\"number\">0</span>);\n\ns.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>;\ns.send(<span class=\"number\">2</span>).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(r.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#830\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the channel capacity if it’s bounded.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{bounded, unbounded};\n\n<span class=\"kw\">let </span>(s, r) = bounded::&lt;i32&gt;(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(r.capacity(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;i32&gt;();\n<span class=\"macro\">assert_eq!</span>(r.capacity(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.receiver_count\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#849\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.receiver_count\" class=\"fn\">receiver_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of receivers for the channel.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;()&gt;();\n<span class=\"macro\">assert_eq!</span>(r.receiver_count(), <span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>r2 = r.clone();\n<span class=\"macro\">assert_eq!</span>(r.receiver_count(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sender_count\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#868\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.sender_count\" class=\"fn\">sender_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of senders for the channel.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;()&gt;();\n<span class=\"macro\">assert_eq!</span>(r.sender_count(), <span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>s2 = s.clone();\n<span class=\"macro\">assert_eq!</span>(r.sender_count(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#873\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.downgrade\" class=\"fn\">downgrade</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_channel/struct.WeakReceiver.html\" title=\"struct async_channel::WeakReceiver\">WeakReceiver</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Downgrade the receiver to a weak reference.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.same_channel\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#893\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Receiver.html#tymethod.same_channel\" class=\"fn\">same_channel</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the receivers belong to the same channel.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;()&gt;();\n<span class=\"kw\">let </span>r2 = r.clone();\n\n<span class=\"macro\">assert!</span>(r.same_channel(<span class=\"kw-2\">&amp;</span>r2));</code></pre></div>\n</div></details></div></details>",0,"odilia_cache::ActorRecv"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stream-for-Receiver%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#921\">Source</a><a href=\"#impl-Stream-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#922\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"futures_core/stream/trait.Stream.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>Values yielded by the stream.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_next\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#924\">Source</a><a href=\"#method.poll_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_core/stream/trait.Stream.html#tymethod.poll_next\" class=\"fn\">poll_next</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;<a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt; as <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a>&gt;::<a class=\"associatedtype\" href=\"futures_core/stream/trait.Stream.html#associatedtype.Item\" title=\"type futures_core::stream::Stream::Item\">Item</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to pull out the next value of this stream, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n<code>None</code> if the stream is exhausted. <a href=\"futures_core/stream/trait.Stream.html#tymethod.poll_next\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_core/stream.rs.html#105\">Source</a><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_core/stream/trait.Stream.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class='docblock'>Returns the bounds on the remaining length of the stream. <a href=\"futures_core/stream/trait.Stream.html#method.size_hint\">Read more</a></div></details></div></details>","Stream","odilia_cache::ActorRecv"],["<section id=\"impl-Unpin-for-Receiver%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#583-614\">Source</a><a href=\"#impl-Unpin-for-Receiver%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'__pin, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;<div class=\"where\">where\n    &lt;<a class=\"struct\" href=\"pin_project_lite/__private/struct.PinnedFieldsOfHelperStruct.html\" title=\"struct pin_project_lite::__private::PinnedFieldsOfHelperStruct\">PinnedFieldsOfHelperStruct</a>&lt;<a class=\"struct\" href=\"async_channel/_/struct.__Origin.html\" title=\"struct async_channel::_::__Origin\">__Origin</a>&lt;'__pin, T&gt;&gt; as <a class=\"trait\" href=\"pin_project_lite/__private/trait.PinnedFieldsOfHelperTrait.html\" title=\"trait pin_project_lite::__private::PinnedFieldsOfHelperTrait\">PinnedFieldsOfHelperTrait</a>&gt;::<a class=\"associatedtype\" href=\"pin_project_lite/__private/trait.PinnedFieldsOfHelperTrait.html#associatedtype.Actual\" title=\"type pin_project_lite::__private::PinnedFieldsOfHelperTrait::Actual\">Actual</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,</div></h3></section>","Unpin","odilia_cache::ActorRecv"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[29023]}