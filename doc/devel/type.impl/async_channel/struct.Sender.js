(function() {
    var type_impls = Object.fromEntries([["odilia_cache",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Sender%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#568\">Source</a><a href=\"#impl-Clone-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"async_channel/struct.Sender.html\" title=\"struct async_channel::Sender\">Sender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#569\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_channel/struct.Sender.html\" title=\"struct async_channel::Sender\">Sender</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","odilia_cache::ActorSend"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Sender%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#562\">Source</a><a href=\"#impl-Debug-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"async_channel/struct.Sender.html\" title=\"struct async_channel::Sender\">Sender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#563\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","odilia_cache::ActorSend"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Sender%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#553\">Source</a><a href=\"#impl-Drop-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"async_channel/struct.Sender.html\" title=\"struct async_channel::Sender\">Sender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#554\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","odilia_cache::ActorSend"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sender%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#212\">Source</a><a href=\"#impl-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"async_channel/struct.Sender.html\" title=\"struct async_channel::Sender\">Sender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_send\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#230\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.try_send\" class=\"fn\">try_send</a>(&amp;self, msg: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"async_channel/enum.TrySendError.html\" title=\"enum async_channel::TrySendError\">TrySendError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to send a message into the channel.</p>\n<p>If the channel is full or closed, this method returns an error.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{bounded, TrySendError};\n\n<span class=\"kw\">let </span>(s, r) = bounded(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(s.try_send(<span class=\"number\">1</span>), <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(s.try_send(<span class=\"number\">2</span>), <span class=\"prelude-val\">Err</span>(TrySendError::Full(<span class=\"number\">2</span>)));\n\ndrop(r);\n<span class=\"macro\">assert_eq!</span>(s.try_send(<span class=\"number\">3</span>), <span class=\"prelude-val\">Err</span>(TrySendError::Closed(<span class=\"number\">3</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#266\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.send\" class=\"fn\">send</a>(&amp;self, msg: T) -&gt; <a class=\"struct\" href=\"async_channel/struct.Send.html\" title=\"struct async_channel::Send\">Send</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Sends a message into the channel.</p>\n<p>If the channel is full, this method waits until there is space for a message.</p>\n<p>If the channel is closed, this method returns an error.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, SendError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(()));\ndrop(r);\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">2</span>).<span class=\"kw\">await</span>, <span class=\"prelude-val\">Err</span>(SendError(<span class=\"number\">2</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.closed\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#290\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.closed\" class=\"fn\">closed</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_channel/struct.Closed.html\" title=\"struct async_channel::Closed\">Closed</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Completes when all receivers have dropped.</p>\n<p>This allows the producers to get notified when interest in the produced values is canceled and immediately stop doing work.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, SendError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;i32&gt;();\ndrop(r);\ns.closed().<span class=\"kw\">await</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_blocking\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#324\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.send_blocking\" class=\"fn\">send_blocking</a>(&amp;self, msg: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"async_channel/struct.SendError.html\" title=\"struct async_channel::SendError\">SendError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Sends a message into this channel using the blocking strategy.</p>\n<p>If the channel is full, this method will block until there is room.\nIf the channel is closed, this method returns an error.</p>\n<h5 id=\"blocking\"><a class=\"doc-anchor\" href=\"#blocking\">§</a>Blocking</h5>\n<p>Rather than using asynchronous waiting, like the <a href=\"async_channel/struct.Sender.html#method.send\" title=\"method async_channel::Sender::send\"><code>send</code></a> method,\nthis method will block the current thread until the message is sent.</p>\n<p>This method should not be used in an asynchronous context. It is intended\nto be used such that a channel can be used in both asynchronous and synchronous contexts.\nCalling this method in an asynchronous context may result in deadlocks.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, SendError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n\n<span class=\"macro\">assert_eq!</span>(s.send_blocking(<span class=\"number\">1</span>), <span class=\"prelude-val\">Ok</span>(()));\ndrop(r);\n<span class=\"macro\">assert_eq!</span>(s.send_blocking(<span class=\"number\">2</span>), <span class=\"prelude-val\">Err</span>(SendError(<span class=\"number\">2</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_send\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#352\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.force_send\" class=\"fn\">force_send</a>(&amp;self, msg: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, <a class=\"struct\" href=\"async_channel/struct.SendError.html\" title=\"struct async_channel::SendError\">SendError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Forcefully push a message into this channel.</p>\n<p>If the channel is full, this method will replace an existing message in the\nchannel and return it as <code>Ok(Some(value))</code>. If the channel is closed, this\nmethod will return an error.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{bounded, SendError};\n\n<span class=\"kw\">let </span>(s, r) = bounded(<span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">2</span>).<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(s.force_send(<span class=\"number\">3</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">None</span>));\n<span class=\"macro\">assert_eq!</span>(s.force_send(<span class=\"number\">4</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>)));\n\n<span class=\"macro\">assert_eq!</span>(r.recv().<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(r.recv().<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(r.recv().<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.close\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#389\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.close\" class=\"fn\">close</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Closes the channel.</p>\n<p>Returns <code>true</code> if this call has closed the channel and it was not closed already.</p>\n<p>The remaining messages can still be received.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, RecvError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert!</span>(s.close());\n\n<span class=\"macro\">assert_eq!</span>(r.recv().<span class=\"kw\">await</span>, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(r.recv().<span class=\"kw\">await</span>, <span class=\"prelude-val\">Err</span>(RecvError));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_closed\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#408\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.is_closed\" class=\"fn\">is_closed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the channel is closed.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{unbounded, RecvError};\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;()&gt;();\n<span class=\"macro\">assert!</span>(!s.is_closed());\n\ndrop(r);\n<span class=\"macro\">assert!</span>(s.is_closed());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#427\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the channel is empty.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n\n<span class=\"macro\">assert!</span>(s.is_empty());\ns.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert!</span>(!s.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#448\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the channel is full.</p>\n<p>Unbounded channels are never full.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::bounded;\n\n<span class=\"kw\">let </span>(s, r) = bounded(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert!</span>(!s.is_full());\ns.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert!</span>(s.is_full());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#468\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of messages in the channel.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">0</span>);\n\ns.send(<span class=\"number\">1</span>).<span class=\"kw\">await</span>;\ns.send(<span class=\"number\">2</span>).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#485\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the channel capacity if it’s bounded.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::{bounded, unbounded};\n\n<span class=\"kw\">let </span>(s, r) = bounded::&lt;i32&gt;(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(s.capacity(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;i32&gt;();\n<span class=\"macro\">assert_eq!</span>(s.capacity(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.receiver_count\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#504\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.receiver_count\" class=\"fn\">receiver_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of receivers for the channel.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;()&gt;();\n<span class=\"macro\">assert_eq!</span>(s.receiver_count(), <span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>r2 = r.clone();\n<span class=\"macro\">assert_eq!</span>(s.receiver_count(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sender_count\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#523\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.sender_count\" class=\"fn\">sender_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of senders for the channel.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;()&gt;();\n<span class=\"macro\">assert_eq!</span>(s.sender_count(), <span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>s2 = s.clone();\n<span class=\"macro\">assert_eq!</span>(s.sender_count(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#528\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.downgrade\" class=\"fn\">downgrade</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_channel/struct.WeakSender.html\" title=\"struct async_channel::WeakSender\">WeakSender</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Downgrade the sender to a weak reference.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.same_channel\" class=\"method\"><a class=\"src rightside\" href=\"src/async_channel/lib.rs.html#548\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_channel/struct.Sender.html#tymethod.same_channel\" class=\"fn\">same_channel</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"async_channel/struct.Sender.html\" title=\"struct async_channel::Sender\">Sender</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the senders belong to the same channel.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded::&lt;()&gt;();\n<span class=\"kw\">let </span>s2 = s.clone();\n\n<span class=\"macro\">assert!</span>(s.same_channel(<span class=\"kw-2\">&amp;</span>s2));</code></pre></div>\n</div></details></div></details>",0,"odilia_cache::ActorSend"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[25672]}