(function() {
    var type_impls = Object.fromEntries([["odilia_cache",[]],["odilia_common",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoCommands-for-(T1,+T2)\" class=\"impl\"><a class=\"src rightside\" href=\"src/odilia_common/command.rs.html#131-140\">Source</a><a href=\"#impl-IntoCommands-for-(T1,+T2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T1, T2&gt; <a class=\"trait\" href=\"odilia_common/command/trait.IntoCommands.html\" title=\"trait odilia_common::command::IntoCommands\">IntoCommands</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T1, T2)</a><div class=\"where\">where\n    T1: <a class=\"trait\" href=\"odilia_common/command/trait.IntoCommands.html\" title=\"trait odilia_common::command::IntoCommands\">IntoCommands</a>,\n    T2: <a class=\"trait\" href=\"odilia_common/command/trait.IntoCommands.html\" title=\"trait odilia_common::command::IntoCommands\">IntoCommands</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/odilia_common/command.rs.html#136\">Source</a><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"odilia_common/command/trait.IntoCommands.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/iter/adapters/chain/struct.Chain.html\" title=\"struct core::iter::adapters::chain::Chain\">Chain</a>&lt;&lt;T1 as <a class=\"trait\" href=\"odilia_common/command/trait.IntoCommands.html\" title=\"trait odilia_common::command::IntoCommands\">IntoCommands</a>&gt;::<a class=\"associatedtype\" href=\"odilia_common/command/trait.IntoCommands.html#associatedtype.Iter\" title=\"type odilia_common::command::IntoCommands::Iter\">Iter</a>, &lt;T2 as <a class=\"trait\" href=\"odilia_common/command/trait.IntoCommands.html\" title=\"trait odilia_common::command::IntoCommands\">IntoCommands</a>&gt;::<a class=\"associatedtype\" href=\"odilia_common/command/trait.IntoCommands.html#associatedtype.Iter\" title=\"type odilia_common::command::IntoCommands::Iter\">Iter</a>&gt;</h4></section><section id=\"method.into_commands\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/odilia_common/command.rs.html#137-139\">Source</a><a href=\"#method.into_commands\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"odilia_common/command/trait.IntoCommands.html#tymethod.into_commands\" class=\"fn\">into_commands</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"odilia_common/command/trait.IntoCommands.html#associatedtype.Iter\" title=\"type odilia_common::command::IntoCommands::Iter\">Iter</a></h4></section></div></details>","IntoCommands","odilia_common::types::Accessible","odilia_common::Accessible"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFromState%3CS,+T%3E-for-(U1,+U2)\" class=\"impl\"><a class=\"src rightside\" href=\"src/odilia_common/from_state.rs.html#37\">Source</a><a href=\"#impl-TryFromState%3CS,+T%3E-for-(U1,+U2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, T, U1, U2&gt; <a class=\"trait\" href=\"odilia_common/from_state/trait.TryFromState.html\" title=\"trait odilia_common::from_state::TryFromState\">TryFromState</a>&lt;S, T&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(U1, U2)</a><div class=\"where\">where\n    U1: <a class=\"trait\" href=\"odilia_common/from_state/trait.TryFromState.html\" title=\"trait odilia_common::from_state::TryFromState\">TryFromState</a>&lt;S, T&gt;,\n    U2: <a class=\"trait\" href=\"odilia_common/from_state/trait.TryFromState.html\" title=\"trait odilia_common::from_state::TryFromState\">TryFromState</a>&lt;S, T&gt;,\n    <a class=\"enum\" href=\"odilia_common/errors/enum.OdiliaError.html\" title=\"enum odilia_common::errors::OdiliaError\">OdiliaError</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;U1::<a class=\"associatedtype\" href=\"odilia_common/from_state/trait.TryFromState.html#associatedtype.Error\" title=\"type odilia_common::from_state::TryFromState::Error\">Error</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;U2::<a class=\"associatedtype\" href=\"odilia_common/from_state/trait.TryFromState.html#associatedtype.Error\" title=\"type odilia_common::from_state::TryFromState::Error\">Error</a>&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/odilia_common/from_state.rs.html#37\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"odilia_common/from_state/trait.TryFromState.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"odilia_common/errors/enum.OdiliaError.html\" title=\"enum odilia_common::errors::OdiliaError\">OdiliaError</a></h4></section><section id=\"associatedtype.Future\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/odilia_common/from_state.rs.html#37\">Source</a><a href=\"#associatedtype.Future\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"odilia_common/from_state/trait.TryFromState.html#associatedtype.Future\" class=\"associatedtype\">Future</a> = &lt;(<a class=\"struct\" href=\"futures_util/future/try_future/struct.ErrInto.html\" title=\"struct futures_util::future::try_future::ErrInto\">ErrInto</a>&lt;&lt;U1 as <a class=\"trait\" href=\"odilia_common/from_state/trait.TryFromState.html\" title=\"trait odilia_common::from_state::TryFromState\">TryFromState</a>&lt;S, T&gt;&gt;::<a class=\"associatedtype\" href=\"odilia_common/from_state/trait.TryFromState.html#associatedtype.Future\" title=\"type odilia_common::from_state::TryFromState::Future\">Future</a>, <a class=\"enum\" href=\"odilia_common/errors/enum.OdiliaError.html\" title=\"enum odilia_common::errors::OdiliaError\">OdiliaError</a>&gt;, <a class=\"struct\" href=\"futures_util/future/try_future/struct.ErrInto.html\" title=\"struct futures_util::future::try_future::ErrInto\">ErrInto</a>&lt;&lt;U2 as <a class=\"trait\" href=\"odilia_common/from_state/trait.TryFromState.html\" title=\"trait odilia_common::from_state::TryFromState\">TryFromState</a>&lt;S, T&gt;&gt;::<a class=\"associatedtype\" href=\"odilia_common/from_state/trait.TryFromState.html#associatedtype.Future\" title=\"type odilia_common::from_state::TryFromState::Future\">Future</a>, <a class=\"enum\" href=\"odilia_common/errors/enum.OdiliaError.html\" title=\"enum odilia_common::errors::OdiliaError\">OdiliaError</a>&gt;) as <a class=\"trait\" href=\"futures_concurrency/future/try_join/trait.TryJoin.html\" title=\"trait futures_concurrency::future::try_join::TryJoin\">TryJoin</a>&gt;::<a class=\"associatedtype\" href=\"futures_concurrency/future/try_join/trait.TryJoin.html#associatedtype.Future\" title=\"type futures_concurrency::future::try_join::TryJoin::Future\">Future</a></h4></section><section id=\"method.try_from_state\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/odilia_common/from_state.rs.html#37\">Source</a><a href=\"#method.try_from_state\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"odilia_common/from_state/trait.TryFromState.html#tymethod.try_from_state\" class=\"fn\">try_from_state</a>(state: S, data: T) -&gt; Self::<a class=\"associatedtype\" href=\"odilia_common/from_state/trait.TryFromState.html#associatedtype.Future\" title=\"type odilia_common::from_state::TryFromState::Future\">Future</a></h4></section></div></details>","TryFromState<S, T>","odilia_common::types::Accessible","odilia_common::Accessible"]]],["odilia_notify",[]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[19,8232,21]}