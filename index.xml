<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Odilia Screen Reader</title><link>https://odilia.app/</link><description>Recent content in Home on Odilia Screen Reader</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 07 Jan 2022 00:05:47 +0000</lastBuildDate><atom:link href="https://odilia.app/index.xml" rel="self" type="application/rss+xml"/><item><title>The First Prototype Has been Released!</title><link>https://odilia.app/news/first-prototype/</link><pubDate>Tue, 26 Oct 2021 22:45:41 +0000</pubDate><guid>https://odilia.app/news/first-prototype/</guid><description>We know it has been a long time, however we are delighted to inform you that the first Odilia prototype is up on GitHub, with a very early alpha stage build for anyone curious enough to try it out.
If you want to try it out, the link is here:
https://github.com/yggdrasil-sr/yggdrasil-prototype/releases/
the screen reader can&amp;rsquo;t do much at the moment, however this is what it can do so far
like any normal screen reader, it can read most components exposed by the Linux accessibility interface, such as buttons, checkboxes, radio buttons, etc.</description><category>news</category><category domain="https://odilia.apptags">prototype</category><category domain="https://odilia.apptags">release</category></item><item><title>Minimal speech-dispatcher Bindings Created</title><link>https://odilia.app/news/minimal-speech-dispatcher-bindings/</link><pubDate>Wed, 22 Sep 2021 15:24:01 +0000</pubDate><guid>https://odilia.app/news/minimal-speech-dispatcher-bindings/</guid><description>&lt;p>As of afew days ago, a &lt;a href="https://github.com/odilia-app/tts_subsystem">minimal binding to speech-dispatcher&lt;/a> (the TTS system for Linux) was created, which
wraps the C functions provided by &lt;a href="https://github.com/ndarilek/speech-dispatcher-sys">Nolan&amp;rsquo;s &lt;code>speech-dispatcher-sys&lt;/code> crate&lt;/a> in a safe Rust API.&lt;/p></description><category>news</category><category domain="https://odilia.apptags">api</category><category domain="https://odilia.apptags">rust</category><category domain="https://odilia.apptags">speech</category></item><item><title>Design</title><link>https://odilia.app/design/</link><pubDate>Mon, 06 Sep 2021 23:17:02 +0000</pubDate><guid>https://odilia.app/design/</guid><description>Event Based Design Since Node.js was introduced to the market, the web space has enjoyed more scalable and responsive systems, due to Node&amp;rsquo;s event driven architecture, where every system is loosely coupled to one another, where asynchronous programming, events and messages govern the program flow, therefore making traditional performance bottlenecks like disk i/o, database access and others nearly insignificant, since access to such resources is properly managed and interested parties are notified whenever such a resource is free to use.</description></item></channel></rss>