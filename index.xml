<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Odilia Screen Reader</title><link>https://odilia.app/</link><description>Recent content in Home on Odilia Screen Reader</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Aug 2022 15:07:41 +0100</lastBuildDate><atom:link href="https://odilia.app/index.xml" rel="self" type="application/rss+xml"/><item><title>Design</title><link>https://odilia.app/doc/devel/design/</link><pubDate>Sun, 24 Jul 2022 13:53:51 +0100</pubDate><guid>https://odilia.app/doc/devel/design/</guid><description>Components Screen readers are complex applications that need to interact with many different systems and technologies, and Odilia is no different. For this reason, the project is split into several crates:
Odilia &amp;ndash; The main application This is the toplevel binary crate, which glues all the smaller crates together. It also handles logging and other application-wide tasks.
atspi &amp;ndash; Accessibility Interface This crate communicates with the Assistive Technology Service Provider Interface, which allows Odilia to access and present the content in applications and the desktop environment.</description><category>doc</category></item><item><title>Useful Links</title><link>https://odilia.app/doc/devel/useful-links/</link><pubDate>Fri, 12 Aug 2022 15:07:41 +0100</pubDate><guid>https://odilia.app/doc/devel/useful-links/</guid><description>At-spi General overview, with several links Accessible Document Navigation Using AT-SPI API documentation Examples, including Javascript, C and Python Examples exclusively using py-atspi2, the human-generated bindings, not the ones generated via GObject Introspection Odilia&amp;rsquo;s atspi crate Speech libspeech library documentation Speech Synthesis Interface Protocol (SSIP) API documentation Speech Synthesis Markup Language (SSML) Version 1.1 Raw FFI Rust bindings to libspeech Idiomatic Rust bindings to libspeech, what we&amp;rsquo;re currently using Pure Rust interface to speech-dispatcher, what we&amp;rsquo;d like to use Odilia&amp;rsquo;s tts crate Braille Liblouis users and programmers manual Liblouis bindings for rust, for braille tables and multiple braille codes, including those for the majority of languages Libbrlapi reference manual</description><category>doc</category></item><item><title>Installing Odilia</title><link>https://odilia.app/doc/user/installation/</link><pubDate>Sun, 24 Jul 2022 14:03:55 +0100</pubDate><guid>https://odilia.app/doc/user/installation/</guid><description>Requirements Odilia should run on any Unix-like platform with the required dependencies supported by Rust . Currently, we primarily target Linux, however, we plan to support other free operating systems such as *BSD in the future (patches welcome).
The following dependencies are required to build and run Odilia:
Build Dependencies Rust Libclang &amp;gt;= 5.0, required by Rust Bindgensee this page This is required for generating the Rust bindings to libspeech Runtime Dependenceis speech-dispatcher &amp;gt;= 0.</description><category>doc</category></item><item><title>Odilia Users Guide</title><link>https://odilia.app/doc/user/guide/</link><pubDate>Wed, 20 Jul 2022 13:27:16 +0100</pubDate><guid>https://odilia.app/doc/user/guide/</guid><description>Odilia should start speaking immediately when started. Some key bindings may feel familiar, like capslock+b for browse mode and h to go to the next heading.
Some things may feel different. Note that for one thing, Odilia does not change modes automatically for you. This could be added in the future, but we are starting with a very minimal system to begin with; we are happy to expand as feature requests arise.</description><category>doc</category></item><item><title>FAQ</title><link>https://odilia.app/doc/user/faq/</link><pubDate>Wed, 20 Jul 2022 13:31:00 +0100</pubDate><guid>https://odilia.app/doc/user/faq/</guid><description>Why doesn&amp;rsquo;t my favourite keybinding work? Either one of the following two things have happened:
We haven&amp;rsquo;t implemented functionality for this keybinding as of yet. (Just ask nicely, and we should be able to) The keybinding is different than what you&amp;rsquo;re used to. This can be tweaked by changing the contents of your sohkdrc file. Please feel free to reach out via Github issues, if you think there is something missing.</description><category>doc</category></item><item><title>Join the Odilia Community!</title><link>https://odilia.app/community/</link><pubDate>Fri, 17 Jun 2022 16:36:42 +0100</pubDate><guid>https://odilia.app/community/</guid><description>The Odilia dev team regularly hangs out in our Matrix space: #odilia-screen-reader:matrix.org. Whether you have plans to contribute, want to follow along with development, or just want some fellow nerds to chat to, come join us! We also bridge this space to discord, and you can get in touch with the developers directly if you wish.
Contributing There are many ways you can contribute to Odilia.
If you&amp;rsquo;re a developer, send us a pull-request.</description></item><item><title>One More Thing - Final Prototype Released</title><link>https://odilia.app/news/one-more-prototype/</link><pubDate>Sat, 12 Feb 2022 11:47:27 +0000</pubDate><guid>https://odilia.app/news/one-more-prototype/</guid><description>&lt;p>As we &lt;a href="../enough-prototypes">announced recently&lt;/a>, we decided that we&amp;rsquo;d learned enough from &lt;a href="https://github.com/odilia-app/odilia-prototype">the Odilia prototype&lt;/a>
to actually implement the real thing. The prototype code, while functional, prioritised experimentation over quality,
and thus we&amp;rsquo;ll be throwing almost all of it out completely, but the code is far less important than the experience we
gained from writing it.&lt;/p></description><category>news</category><category domain="https://odilia.apptags">prototype</category><category domain="https://odilia.apptags">release</category></item><item><title>Enough Prototypes, let's do this for real</title><link>https://odilia.app/news/enough-prototypes/</link><pubDate>Wed, 02 Feb 2022 12:06:49 +0200</pubDate><guid>https://odilia.app/news/enough-prototypes/</guid><description>&lt;p>As of afew days ago, we decided we played enough with the tools and components of the linux accessibility stack to be
able to say that we aren&amp;rsquo;t so ignorant anymore, we know at least the basics about how it all fits together, how our
screenreaders read information from a linux gui app, how the gui toolkit and atspi work together to provide the required
context for such tools to operate.&lt;/p>
&lt;p>Since I don&amp;rsquo;t want to bore you with code snippets, git logs, conversations from who knows how much time ago and so on, I
will quickly give you a rundown of everything we learned during this long, laborious but nevertheless fun and
educational journey&lt;/p></description><category>news</category><category domain="https://odilia.apptags">prototype</category><category domain="https://odilia.apptags">rust</category></item><item><title>Design</title><link>https://odilia.app/design/</link><pubDate>Tue, 25 Jan 2022 11:22:33 +0000</pubDate><guid>https://odilia.app/design/</guid><description>Event Based Design Since Node.js was introduced to the market, the web space has enjoyed more scalable and responsive systems, due to Node&amp;rsquo;s event driven architecture, where every system is loosely coupled to one another, where asynchronous programming, events and messages govern the program flow, therefore making traditional performance bottlenecks like disk i/o, database access and others nearly insignificant, since access to such resources is properly managed and interested parties are notified whenever such a resource is free to use.</description></item><item><title>The First Prototype Has been Released!</title><link>https://odilia.app/news/first-prototype/</link><pubDate>Tue, 26 Oct 2021 22:45:41 +0000</pubDate><guid>https://odilia.app/news/first-prototype/</guid><description>We know it has been a long time, however we are delighted to inform you that the first Odilia prototype is up on GitHub, with a very early alpha stage build for anyone curious enough to try it out.
If you want to try it out, the link is here:
https://github.com/yggdrasil-sr/yggdrasil-prototype/releases/
the screen reader can&amp;rsquo;t do much at the moment, however this is what it can do so far
like any normal screen reader, it can read most components exposed by the Linux accessibility interface, such as buttons, checkboxes, radio buttons, etc.</description><category>news</category><category domain="https://odilia.apptags">prototype</category><category domain="https://odilia.apptags">release</category></item><item><title>Minimal speech-dispatcher Bindings Created</title><link>https://odilia.app/news/minimal-speech-dispatcher-bindings/</link><pubDate>Wed, 22 Sep 2021 15:24:01 +0000</pubDate><guid>https://odilia.app/news/minimal-speech-dispatcher-bindings/</guid><description>&lt;p>As of afew days ago, a &lt;a href="https://github.com/odilia-app/tts_subsystem">minimal binding to speech-dispatcher&lt;/a> (the TTS system for Linux) was created, which
wraps the C functions provided by &lt;a href="https://github.com/ndarilek/speech-dispatcher-sys">Nolan&amp;rsquo;s &lt;code>speech-dispatcher-sys&lt;/code> crate&lt;/a> in a safe Rust API.&lt;/p></description><category>news</category><category domain="https://odilia.apptags">api</category><category domain="https://odilia.apptags">rust</category><category domain="https://odilia.apptags">speech</category></item></channel></rss>